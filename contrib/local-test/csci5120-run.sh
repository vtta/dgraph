#!/bin/bash
set -ex

fail() {
    printf '%s\n' "$1" >&2
    exit "${2-1}"
}

DIR="$(dirname "$(readlink -f "$0")")"
DIR="$(readlink -f "$DIR/../..")"

DGRAPH="$DIR/dgraph/dgraph"
RATEL_RELEASE="https://github.com/dgraph-io/ratel/releases/download/21.03/dgraph-ratel-linux.tar.gz"
RATEL="$DIR/ratel"
[ -f "$DGRAPH" ] || make -C "$DIR" -j
[ -f "$RATEL" ] || ( wget "$RATEL_RELEASE" && tar axvf dgraph-ratel-linux.tar.gz )
[ $# -eq 1 ] || fail "please provide path to bulk loaded dbpedia dataset, i.e. out dir generated by dgraph bulk"
BULK="$(readlink -f "$1")"

unset http_proxy https_proxy
stop() {
  ID="$1"
  curl "http://localhost:$((8080+ID))/admin" \
    --fail --silent --request POST \
    --header "Content-Type: application/graphql" \
    --data $'mutation { stop { response { message code } } }' \
    &>/dev/null || true
}
cleanup() {
  stop 0
  stop 1
  stop 2
  wait ${PIDS[@]:2}
  kill ${PIDS[@]:0:2} &>/dev/null
  wait ${PIDS[@]}
}
trap cleanup EXIT

wait_for_ctrl_c() {
  read -r -d '' _ </dev/tty
}

zero() {
  local DATADIR="$DIR/data-run/zero"
  "$DGRAPH" zero -v2 \
    --log_dir=$DATADIR \
    --wal=$DATADIR/w \
    --telemetry="reports=false;sentry=false;" \
    &
    # &>/dev/null &
  PIDS+=($!)
}

alpha() {
  local ID="$1"
  local BULKDATA="$BULK/$ID/p"
  local DATADIR="$DIR/data-run/alpha$ID"
  [ -d $DATADIR/p ] || {
    rsync -rvh --progress --mkpath "$BULKDATA" "$DATADIR" &>/dev/null \
    || fail "cannot prepare bulk data for alpha$ID"
  }
  "$DGRAPH" alpha -v2 \
    --security "whitelist=0.0.0.0/0;" \
    --log_dir=$DATADIR \
    --my=0.0.0.0:$((7080+ID)) \
    --zero=0.0.0.0:5080 \
    --raft="group=$((ID+1))" \
    --port_offset=$ID \
    --tmp="$DATADIR/t" \
    --wal="$DATADIR/w" \
    --postings="$DATADIR/p" \
    --telemetry="reports=false;sentry=false;" \
    --limit "mutations=disallow;" \
    &
    # &>/dev/null &
  PIDS+=($!)
}

ratel() {
  "$RATEL" &>/dev/null &
  PIDS+=($!)
}

zero
ratel
alpha 0
alpha 1
alpha 2

wait_for_ctrl_c

